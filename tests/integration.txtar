# this testscript test the 'analyze' command

# skip if go is not installed
[!exec:go] skip

# move on the testcases directory
cd testcases/example-app/

# test usage
exec harpoon analyze -h
stdout 'Usage:'

exec harpoon analyze --save -D /tmp/results
exists harpoon-report.yml
exists /tmp/results/
cmp harpoon-report.yml harpoon-expected-report.yml

exec harpoon hunt -S -D /tmp/results -F harpoon-report.yml
exists /tmp/results/github_com_alegrey91_seccomp-test-coverage_pkg_randomic_DoSomethingSpecial
exists /tmp/results/github_com_alegrey91_seccomp-test-coverage_pkg_randomic_FlipCoin
exists /tmp/results/github_com_alegrey91_seccomp-test-coverage_pkg_randomic_RockPaperScissors
exists /tmp/results/github_com_alegrey91_seccomp-test-coverage_pkg_randomic_ThrowDice

# test harpoon capture command
exec harpoon capture -h
stdout 'Usage:'

# test it doesn't panic when the file is not executable
exec chmod -x bin/example-app
exec harpoon capture -e -c -f main.main -- ./bin/example-app
stderr 'command execution error: fork/exec .* permission denied'
exec chmod +x bin/example-app

# test it doesn't panic when no arguments are provided
! exec harpoon capture -e -c -f main.main
stdout '.* error no arguments provided, at least 1 argument is required'

# setting up test application
exists bin/example-app
# this must be done within the testscript environment
exec chmod +x bin/example-app
exec ls -la bin/example-app
exec bin/example-app coin

exec harpoon capture -f main.main -- ./bin/example-app coin
stdout 'write'

exec harpoon capture -f main.main -f github.com/alegrey91/seccomp-test-coverage/pkg/randomic.FlipCoin -- ./bin/example-app coin
stdout 'write'

exec harpoon capture -f main.main -c -- ./bin/example-app coin
stdout 'stdout: \[flip coin\]'

exec harpoon capture -f main.main -E "VAR1=0" -E "VAR2=1" -- ./bin/example-app coin
stdout 'write'

exec harpoon capture -f main.main -e -- ./bin/example-app streams
stdout 'stderr: 0'

exec harpoon capture -f main.main -D /tmp/results -S -- ./bin/example-app streams

exec harpoon capture -f main.main -c -e -- ./bin/example-app streams
stdout 'stdout: 0'
stdout 'stderr: 0'

exec harpoon capture -f main.main -- ./bin/example-app coin
stdout 'write'

exec harpoon capture -f main.main -l -- ./bin/example-app coin
stderr 'libbpf: license of ebpf.o is GPL'

exec harpoon capture -f main.main -i 2 -- ./bin/example-app ten
stdout 'write'
stdout 'nanosleep'

exec harpoon capture -f main.main -i 2 -c -- ./bin/example-app ten
stdout 'write'
stdout 'nanosleep'
stdout 'stdout: hello!'

exec harpoon capture -f main.main -i 2 -S -D /tmp/results -- ./bin/example-app ten
exists /tmp/results/main_main
grep 'write' /tmp/results/main_main
grep 'nanosleep' /tmp/results/main_main

exec harpoon capture -f main.main -c -i 2 -S -D /tmp/results -- ./bin/example-app ten
stdout -count=10 'stdout: hello!'
exists /tmp/results/main_main
grep 'write' /tmp/results/main_main
grep 'nanosleep' /tmp/results/main_main

exec harpoon capture -f main.main -c -i 2 -S -D /tmp/results -- ./bin/example-app infinite &infinite&
exec sleep 5
kill -KILL infinite
# wait infinite
exists /tmp/results/main_main
grep 'write' /tmp/results/main_main
grep 'nanosleep' /tmp/results/main_main

! exec harpoon build -D /tmp/results -S --name profile.json --add-syscall-sets=abc
exec harpoon build -D /tmp/results -S --name profile.json --add-syscall-sets=dynamic,static,docker
exists profile.json
cmp profile.json expected-profile.json

-- testcases/example-app/harpoon-expected-report.yml --
---
symbolsOrigins:
  - testBinaryPath: /tmp/results/__pkg_randomic.test
    symbols:
    - github.com/alegrey91/seccomp-test-coverage/pkg/randomic.RockPaperScissors
    - github.com/alegrey91/seccomp-test-coverage/pkg/randomic.ThrowDice
    - github.com/alegrey91/seccomp-test-coverage/pkg/randomic.FlipCoin
    - github.com/alegrey91/seccomp-test-coverage/pkg/randomic.DoSomethingSpecial

-- testcases/example-app/expected-profile.json --
{
    "defaultAction": "SCMP_ACT_ERRNO",
    "architectures": [
        "SCMP_ARCH_X86_64",
        "SCMP_ARCH_X86",
        "SCMP_ARCH_X32"
    ],
    "syscalls": [
        {
            "names": [
                "access",
                "arch_prctl",
                "brk",
                "capget",
                "capset",
                "chdir",
                "clone",
                "clone3",
                "close",
                "epoll_create1",
                "epoll_ctl",
                "epoll_pwait",
                "eventfd",
                "eventfd2",
                "execve",
                "exit_group",
                "fchown",
                "fcntl",
                "fstat",
                "fstatfs",
                "futex",
                "getcwd",
                "getdents64",
                "geteuid",
                "getpgrp",
                "getpid",
                "getppid",
                "getrandom",
                "getrlimit",
                "gettid",
                "ioctl",
                "lseek",
                "lstat",
                "madvise",
                "mmap",
                "mprotect",
                "munmap",
                "nanosleep",
                "newfstatat",
                "openat",
                "pipe2",
                "prctl",
                "pread64",
                "prlimit64",
                "read",
                "rseq",
                "rt_sigaction",
                "rt_sigprocmask",
                "rt_sigreturn",
                "sched_getaffinity",
                "sched_yield",
                "set_robust_list",
                "set_tid_address",
                "setgid",
                "setgroups",
                "setrlimit",
                "setsid",
                "setuid",
                "sigaltstack",
                "stat",
                "tgkill",
                "write"
            ],
            "action": "SCMP_ACT_ALLOW"
        }
    ]
}
